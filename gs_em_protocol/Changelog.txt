/*
[修改日志]

2017-10-18
1、修改上一次修改引入的一个 Bug；

2017-10-14
1、修改一个 Bug，select 函数在阻塞探测 socket 的时候，socket 如果被其他线程关闭，将会导致 select 一直阻塞探测，这会
	导致在设备端自动重启连接时阻塞读退不出来，将阻塞读函数 GS_TCP_BlockRead 修改为 GS_TCP_TimeOutRead，超时后，更新
	socket 进行重新读；

2017-09-30
1、由于在连接的时候 connect 需要不阻塞，读写 socket 的时候需要阻塞，使用 select 封装 recv 和 send 函数，使读写阻塞；

2017-09-29
1、增加接口 GS_EM_RemoteReConnect，用于连接的服务器端/设备端地址发生修改后触发重新连接；
2、修改一个 bug，socket 连接是阻塞的，会导致 connect 在连接不能 ping 通的地址时长时间不返回，导致流程错误；

2017-09-12
1、修改回传音频的一个 Bug；

2017-09-01
1、修改心跳处理的部分 Bug;

2017-08-30
1、修改存储注册文件的一个 Bug；

2017-08-29
1、加入设备接口和 IP 协议接口中间的枚举值转换函数；
2、根据李晓曦的分析，协议中开始播发中的音频传送方式如果是 RTP 单播，后面不会传送地址信息，也不进行解析，默认端口为 8888；
3、修改一个 Bug；

2017-08-23
1、解决内存泄漏的一个 Bug；

2017-08-22
1、将 TCP 接收包和解析部分修改为单字符+环形buffer处理判断，解决可能出现的粘包和分包问题；

2017-08-21
1、将音频回传接口代码填充完；
2、将首次注册信息写入文件；
3、增加存储路径获取接口；

2017-08-18
1、修改编译方式，在外层直接执行 build.sh 文件，直接生成需要的库文件和头文件在 ./lib/release 文件夹，直接拿出来使用即可，方便移植；
2、解决音频接入结束处一个 Bug；
3、修复应答数据的命令类型不对的情况；
4、完善开始播报的处理代码；
5、在 Psi 信息获取中加入通道索引的概念；

2017-08-17
1、修改架构，与设备的交互使用回调的方式；
2、确认当前的代码直接可以在 MV310 编译运行；
3、在 Makefile 中加入 MV310 的编译器；
4、修复用户 Buffer 创建中的一个可能的内存泄漏 Bug;
5、修复 CPU 占用率高的一个 Bug;
6、根据和曦哥商议，sessionid 在发送端只维持一个，所有发送的请求 sessionid 发送的时候加 1；
7、协议中增加设置服务器 IP 地址一项到参数设置中；
8、为了编译和移植方便，更改文件夹方式；

2017-08-16
1、协议中包长度字段经过确认应该包含包头 12 字节，将对应程序修改过来；

2017-08-15
1、写 TCP 测试用 Server，用于调试客户端代码，和搭建临时控制版本；
2、修改 TCP 接收处理中的用户 Buffer 分配的一个 Bug；
3、修复大小端解析数据的一个 bug；
4、修正了一下块打印函数；
5、修改编译方式，在最外层使用 build.sh 中的 PLF 来确定编译平台，直接运行 build.sh 全编译；

2017-08-14
1、调试了 TCP 的通信，使用心跳包测试；
2、修改 IP 协议包解包，把分配的 BufHandle 回传，通过应用程序销毁，这样方便应用函数重入；

2017-08-10
1、写完 TCP 监控的相关代码；
2、写完 TCP 接收的框架代码；
3、增加 IP 协议的打印函数，方便调试使用；
4、在 gs_comm.c 中增加了消息队列的接口函数；

2017-08-09
1、写完 IP 协议包的解析实现；
2、写完 IP 协议包设备端需要进行的『应答包』『心跳包』封包实现；

2017-08-07
1、写完根据 IP 协议包结构生成传送数据串接口；

2017-08-05
1、写完头文件对宏和结构体的定义；

2017-08-04
1、创建工程，制定编码规范，创建配置库进行代码管理；
2、规范如下：
	1）文件名全部使用小写，文件名的前缀为 gs_;
	2）为了移植的方便，因为对于不同的系统使用类型名称不一定是一样的，所以定义一个文件夹叫 comm，这里的文件主要是 gospell 通用的文件，该文件夹下的文件命名为 gs_comm_ 为前缀，gs_comm.h 为借口文件；在 gs_comm.h 中主要是类型的定义，比如：GS_S32、GS_U32等类型定义；使用 #define 来定义变量的别名，有利于使用 #ifndef 进行判断是否原来就有该变量；
	3）gs_comm_ 为前缀的文件中的接口命名全部使用 GS_COMM_SYS_Init() 这样的形式，前缀全部使用大写，实际名称使用驼峰命名法；
	4）对于结构体的命名，如果是 struct 后面加，即是：struct gsProtocol{} 这样的形式，对于 typedef 定义的全部使用大写，如：GS_EM_PROTOCOL_S，后面以 _S 作为结构体的结尾；
	5）对于 Union 的命名与结构体是一样的，只是后缀是 _U;
	6）对于 enum 的命名也是这样的，后缀是 _E;
	7）对于应急广播协议的文件夹命名是 em_broadcast，该文件夹下的文件命名格式是 gs_em_ 为前缀，比如：gs_em_prot.c 包含了平台协议的协议封装和协议解析，gs_em_prot.h 就是协议的接口文件；
	8）应急广播平台协议的处理，接口前缀均是 GS_EM_，其中 GS 代表 gospell， EM 代表 Emergency；
	9）变量的命名：全局变量 g_ 前缀，使用驼峰命名；静态变量使用 s_ 前缀，使用驼峰命名；本地变量使用 l 作为前缀；对于指针，加 p 作为前缀；具体命名如下例：
	U32 g_EmProcTag; // 全局变量
	static U32 s_EmProcTag; // 静态变量
	U32 lEmProcTag; // 局部变量
	U32 *plEmProTag; // 局部指针变量
	10）程序中用到的单词和缩写：
	init: initialization 初始化
	destroy：销毁
	start：开始
	termination：终止
	stop：停止
	create：创建
	handle：句柄
	request：请求
	response：应答
	prot：protocol 协议
	proc：process 处理
	package：封装，封包
	parse：解析
	header：头
	tail：尾
	snd：send 发送
	recv：Receive 接收
	11）有一个文件夹命名为 docs，专门存放文档，开发记录文档为 Changelog.txt；
	12）移植方法和文档：移植有两种方式，一是将源码拷贝到工程下面，直接使用；而是将源码编程库 .a 文件，直接在工程中链接使用即可，支持 linux  和各种嵌入式平台； 

*/
